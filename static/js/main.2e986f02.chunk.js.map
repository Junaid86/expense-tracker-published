{"version":3,"sources":["Components/TransactionDetails/Balance.js","Components/TransactionDetails/TransactionDetails.js","Components/Transactions/Transaction.js","Components/Transactions/TransactionList.js","Components/ManageTransactions.js","App.js","reportWebVitals.js","index.js"],"names":["Balance","props","className","balance","ExpendeDetails","type","value","transactionAmount","step","onChange","transactionAmountChangeHandler","onClick","onAddTransactionClickHandler","onRemoveTransactionClickHandler","Transaction","transaction","date","amount","operation","TransactionList","transactionList","length","map","item","ManagerTransactions","state","transactions","e","target","setState","alert","addTransactionHandler","parseFloat","newTransaction","Date","toISOString","prevtransactions","push","this","TransactionDetails","Component","App","ManageTransactions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e986f02.chunk.js","sourcesContent":["const Balance = props => {\r\n  return (\r\n    <div className=\"new-transaction__control\">\r\n      <label>Balance : {props.balance}</label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Balance;\r\n","import React from \"react\";\r\nimport Balance from \"./Balance\";\r\nconst ExpendeDetails = props => {\r\n  return (\r\n    <div className=\"new-transaction\">\r\n      <Balance balance={props.balance} />\r\n      <div className=\"new-transaction__control\">\r\n        <input type=\"number\" value={props.transactionAmount} step=\"1\" onChange={props.transactionAmountChangeHandler} />\r\n      </div>\r\n      <div>\r\n        <button type=\"button\" onClick={props.onAddTransactionClickHandler}>\r\n          Add\r\n        </button>\r\n        <button type=\"button\" onClick={props.onRemoveTransactionClickHandler}>\r\n          Remove\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpendeDetails;\r\n","const Transaction = props => {\r\n  return (\r\n    // <div>\r\n    //   <span>{props.transaction.date} - </span>\r\n    //   <span>{props.transaction.amount} - </span>\r\n    //   <span>{props.transaction.operation}</span>\r\n    //   </div>\r\n\r\n    <li>\r\n      <div className=\"transaction-item\">\r\n        <div className=\"transaction-date\">{props.transaction.date}</div>\r\n        <div className=\"transaction-amount\">${props.transaction.amount}</div>\r\n        <div className=\"transaction-operation\">{props.transaction.operation}</div>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Transaction;\r\n","import Transaction from \"./Transaction\";\r\n\r\nconst TransactionList = props => {\r\n  return (\r\n    <div className=\"transactions\">\r\n      {props.transactionList.length > 0 ? (\r\n        <>\r\n          <h2 className=\"transactions-list-title\">Transactions:</h2>\r\n          <ul className=\"transactions-list\">\r\n            {props.transactionList.map(item => (\r\n              <div>\r\n                <Transaction transaction={item} />\r\n              </div>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      ) : (\r\n        <h2 className=\"transactions-list__fallback\">No transaction(s) available.</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionList;\r\n","import { Component } from \"react\";\r\nimport TransactionDetails from \"./TransactionDetails/TransactionDetails\";\r\nimport TransactionList from \"./Transactions/TransactionList\";\r\nimport \"./Common.css\";\r\n\r\nclass ManagerTransactions extends Component {\r\n  state = {\r\n    transactions: [],\r\n    balance: 0,\r\n    transactionAmount: 0,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ ...this.state, balance: 500 });\r\n  }\r\n\r\n  transactionAmountChangeHandler = e => {\r\n    let transactionAmount = this.state.transactionAmount;\r\n    transactionAmount = e.target.value;\r\n\r\n    this.setState({\r\n      ...this.state,\r\n      transactionAmount: transactionAmount,\r\n    });\r\n  };\r\n\r\n  onAddTransactionClickHandler = () => {\r\n    if (this.state.transactionAmount <= 0) {\r\n      alert(\"Transaction amount should be greater than zero\");\r\n      return;\r\n    }\r\n    this.addTransactionHandler(\"Add\");\r\n    let balance = this.state.balance;\r\n    balance = parseFloat(balance) + parseFloat(this.state.transactionAmount);\r\n    this.setState({ ...this.state, balance: balance, transactionAmount: 0 });\r\n  };\r\n\r\n  onRemoveTransactionClickHandler = () => {\r\n    debugger;\r\n    if (this.state.balance <= 0) {\r\n      alert(\"Insufficient balance in account\");\r\n      return;\r\n    }\r\n    if (this.state.transactionAmount <= 0 || this.state.transactionAmount > this.state.balance) {\r\n      alert(\"Transaction amount should be greater than zero and less than balance\");\r\n      return;\r\n    }\r\n    this.addTransactionHandler(\"Remove\");\r\n    let balance = this.state.balance;\r\n    balance = parseFloat(balance) - parseFloat(this.state.transactionAmount);\r\n    this.setState({ ...this.state, balance: balance, transactionAmount: 0 });\r\n  };\r\n\r\n  addTransactionHandler = operation => {\r\n    debugger;\r\n    let currentdate = new Date();\r\n    let formattedCurrentDate = currentdate.toISOString();\r\n    debugger;\r\n    let newTransaction = {\r\n      date: formattedCurrentDate,\r\n      operation: operation,\r\n      amount: this.state.transactionAmount,\r\n    };\r\n    let prevtransactions = this.state.transactions;\r\n    prevtransactions.push(newTransaction);\r\n    this.setState({ ...this.state, transactions: prevtransactions });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"transacetion-manager\">\r\n        <h1>Expense Tracker - Basic</h1>\r\n        <TransactionDetails\r\n          balance={this.state.balance}\r\n          transactionAmount={this.state.transactionAmount}\r\n          transactionAmountChangeHandler={this.transactionAmountChangeHandler}\r\n          onAddTransactionClickHandler={this.onAddTransactionClickHandler}\r\n          onRemoveTransactionClickHandler={this.onRemoveTransactionClickHandler}\r\n        />\r\n        <TransactionList transactionList={this.state.transactions} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ManagerTransactions;\r\n","import React from \"react\";\nimport ManageTransactions from \"./Components/ManageTransactions\";\n// import logo from './logo.svg';\n// import './App.css';\n\nconst App = () => {\n  return <ManageTransactions />;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}